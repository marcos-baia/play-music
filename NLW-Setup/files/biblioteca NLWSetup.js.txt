/**
 * @classdesc Esta classe ser√° usada na configura√ß√£o NLW #11 e ajudar√° os alunos
 * para criar o projeto do evento simplificando v√°rios conceitos de JS.
 */
var NLWSetup = class NLWSetup {
  /**
   * Objeto que cont√©m os dados compostos por
   *
   * **key**: O nome do h√°bito como o `data-name` do cont√™iner `.habit`
   * **valor**: `Array` de dias a serem verificados como conclu√≠dos
   * **dia**: Cada dia deve ter o formato `MM-DD` _MM: m√™s, DD: dia_
   *
   *
   * ```js
   * { executar: ['01-01', '01-02', '01-06'] }
   * ```
   * @privado
   */
  dados = {}

  /**
   * Matriz de h√°bitos
   * camelCase: `correr, comerComida`
   * @privado
   */
  h√°bitos = []

  /**
   * `new Set()` de dias para construir a exibi√ß√£o de h√°bitos por dias
   * @privado
   */
  dias = novo Set()

  /**
   * Voc√™ deve construir a estrutura `HTML` assim
   *
   * ```html
   * <forma>
   * <div class="h√°bitos">
   * <div class="habit" data-name="run">üèÉüèΩ‚Äç‚ôÇÔ∏è</div>
   * <div class="habit" data-name="water">üíß</div>
   * <div class="habit" data-name="food">üçé</div>
   * </div>
   *
   * <div class="dias"></div>
   * </form>
   * ```
   *
   * Exemplo de uso
   *
   * ```js
   * const form = document.querySelector('form')
   * const nlwSetup = new NLWSetup(formul√°rio)
   * ```
   *
   * @param formul√°rio {HTMLFormElement}
   *
   */
  construtor(formul√°rio) {
    this.form = formul√°rio
    this.daysContainer = this.form.querySelector(".days")
    this.form.addEventListener("change", () => this.#update())
    this.createHabits()
    this.load()
  }

  /**
   * Ir√° carregar os [data](#data) internos e [renderizar o layout](#renderLayout)
   *
   */
  carregar() {
    const hasData = Object.keys(this.data).length > 0
    if (!hasData) retornar

    this.#registerDays()
    this.renderLayout()
  }

  #registrarDias() {
    Object.keys(this.data).forEach((key) => {
      this.data[chave].forEach((data) => {
        this.days.add(data)
      })
    })
  }

  /**
   * Ir√° renderizar o layout verificando os dias registrados dos dados de h√°bitos
   * Cada dia que foi inclu√≠do nos dados de h√°bitos, ser√° verificado no layout de entrada
   *
   * O cont√™iner `<div class="days"></div>` ser√° preenchido com html,
   * repetindo o container .day para cada dia registrado
   *
   * exemplo
   ```html
    <div class="dia">
        <div>01/01</div>
        <input type="checkbox" name="run" value="01/01"/>
        <input type="checkbox" name="water" value="01/01"/>
        <input type="checkbox" name="food" value="01/01"/>
    </div>
   ```
   *
   */
  renderLayout() {
    this.daysContainer.innerHTML = ""
    for (deixe a data deste.#getSortedDays()) {
      const [m√™s, dia] = data.split("-")
      this.#createDayElement(dia + "/" + m√™s)
    }
  }

  criarHabits() {
    essa forma
      .querySelectorAll(".habit")
      .forEach((habit) => this.#addHabit(habit.dataset.name))
  }

  /**
   * @param {string} h√°bito
   * camelCase: `correr, comerComida`
   * @return {NLWHabits} isso
   */
  #addHabit(h√°bito) {
    este.h√°bitos = [...estes.h√°bitos, h√°bito]
    devolva isso
  }

  /**
   * @param {string} data `DD/MM`
   * - Dia `DD` com 2 d√≠gitos (01-31)
   * - M√™s `MM` com 2 d√≠gitos (01-12)
   
   * @return {string} `MM-DD`
   */
  #getFormattedDate(data) {
    const [dia, m√™s] = data.split("/")
    m√™s de retorno + "-" + dia
  }

  /**
   * Obter valores de entrada de formul√°rio por nome de entrada,
   * e formatar um objeto:
   * - ` { inputName: ["valor1", "valorN", ...]} `
   *
   * Adicione o objeto a this.data
   */
  #atualizar() {
    const formData = new FormData(this.form)
    const prepareData = {}
    for (let habit of this.habits) {
      prepareData[h√°bito] = formData.getAll(h√°bito)
    }

    this.setData(prepareData)
  }

  /**
   * Os dados para construir a tabela de h√°bitos
   *
   * Exemplo de uso
   *
   * ```js
   * dados const = {
   * correr: ['01-01', '01-02', '01-06'],
   * √°gua: ['01-04', '01-05'],
   * comida: ['01-01', '01-03'],
   * }
   *
   * nlwSetup.setData(dados)
   * ```
   *
   * @param {object} data Objeto que cont√©m os dados compostos por
   *
   * - key: O nome do h√°bito como o `data-name` do cont√™iner `.habit`
   * - valor: `Array` de dias a serem verificados como conclu√≠dos
   *
   * _Cada dia deve ter o formato `MM-DD`
   * onde `MM`: √© o m√™s e `DD`: √© o dia_
   *
   * ```js
   * { executar: ['01-01', '01-02', '01-06'] }
   * ```
   */
  setData(dados) {
    if (!dados) {
      throw "Os dados do objeto s√£o necess√°rios { habitName: [... dias: string]"
    }
    this.data = dados
  }

  #getSortedDays() {
    return [...estes dias].sort()
  }

  /**
   * Verifique se o dia j√° existe no conjunto de dias
   *
   * exemplo de uso
   * ```js
   * nlwSetup.dayExists('31/12') // verdadeiro ou falso
   * ```
   *
   * @param {string} data `DD/MM`
   * - Dia `DD` com 2 d√≠gitos (01-31)
   * - M√™s `MM` com 2 d√≠gitos (01-12)
   *
   * @return {booleano}
   */
  dayExists(data) {
    const formattedDate = this.#getFormattedDate(data)
    return [...this.days].includes(formattedDate)
  }
  /**
   * Adicione um dia aos dias registrados e renderize o layout depois disso
   *
   * exemplo de uso
   * ```
   * nlwSetup.addDay('31/12')
   * ```
   * @param {string} data `DD/MM`
   * - Dia `DD` com 2 d√≠gitos (01-31)
   * - M√™s `MM` com 2 d√≠gitos (01-12)
   */
  adicionarDia(data) {
    if (!data || !data?.includes("/")) return
    if (this.dayExists(date)) return
    this.days.add(this.#getFormattedDate(date))
    this.renderLayout()
  }

  /**
   * @param {string} data `DD/MM`
   * - Dia `DD` com 2 d√≠gitos (01-31)
   * - M√™s `MM` com 2 d√≠gitos (01-12)
   */
  #createDayElement(data) {
    const divDay = document.createElement("div")
    divDay.setAttribute("turma", "dia")
    divDay.innerHTML = `<div>${date}</div>` + this.createCheckboxes(date)
    this.daysContainer.append(divDay)
  }

  criarCheckboxes(data) {
    const formattedDate = this.#getFormattedDate(data)
    deixe caixas de sele√ß√£o = ""
    for (let habit of this.habits) {
      caixas de sele√ß√£o += `<entrada
        type="checkbox" name="${habit}" value="${formattedDate}"
        ${this.data[habit]?.includes(formattedDate) && "checked"}/>`
    }

    caixas de sele√ß√£o de retorno
  }
}